/*
===============================================================================
Database Exploration
===============================================================================
Purpose:
    - To explore the structure of the database, including the list of tables and their schemas.
    - To inspect the columns and metadata for specific tables.
===============================================================================
*/
 
 
 -- STEP 1
 -- Explore All Objects in the Database
 
 SELECT * FROM INFORMATION_SCHEMA.TABLES;


 -- Explore All Columns in the Database
 SELECT * 
 FROM INFORMATION_SCHEMA.COLUMNS
 WHERE TABLE_NAME = 'dim_customers'


 -- STEP 2
 -- Dimensions Exploration

-- In first table
SELECT 
DISTINCT country 
FROM gold.dim_customers


-- In second table 
SELECT DISTINCT category, subcategory, product_name FROM gold.dim_products
ORDER BY 1,2,3


-- STEP 3
-- Date Exploration
-- To get earliest and latest dates
-- To get the scope of the business



-- Finding the date of first and last order
SELECT
MIN(order_date) first_order_date,
MAX(order_date) last_order_date,
DATEDIFF(year, MIN(order_date), MAX(order_date)) AS order_range_over_years
FROM gold.fact_sales


-- Finding the youngest and Oldest Customer
SELECT 
MIN(birthdate) AS oldest_birthdate,
DATEDIFF(year, MIN(birthdate), GETDATE()) AS oldest_age,
MAX(birthdate) AS youngest_birthdate,
DATEDIFF(year, MAX(birthdate), GETDATE()) AS youngest_age
FROM gold.dim_customers


--- Measures Exploration

-- Finding the total sales
SELECT SUM(sales_amount) AS total_sales FROM gold.fact_sales


-- Finding how mant items are sold
SELECT SUM(quantity) AS items_sold FROM gold.fact_sales

-- Findng the average selling price
SELECT AVG(price) AS average_price FROM gold.fact_sales


-- Findng the total number of orders

SELECT COUNT(order_number) AS number_of_orders FROM gold.fact_sales
SELECT COUNT(DISTINCT order_number) AS number_of_orders FROM gold.fact_sales


-- Finding the total number of products
SELECT COUNT(product_key) AS total_products FROM gold.dim_products
SELECT COUNT(DISTINCT product_key) AS total_products FROM gold.dim_products


-- Finding the total number of customers
SELECT COUNT(customer_key) AS total_customers FROM gold.dim_customers



-- Finding the total number of customers
SELECT COUNT(DISTINCT customer_key) AS total_customers FROM gold.fact_sales



-- Generate a Report that shows all key metrics of the business

SELECT 'Total Sales' AS measure_name, SUM(sales_amount) AS measure_value FROM gold.fact_sales
UNION ALL  
SELECT 'Total Quantity' , SUM(quantity) FROM gold.fact_sales
UNION ALL
SELECT 'Average Price' , AVG(price) FROM gold.fact_sales
UNION ALL
SELECT 'Total Num Orders',  COUNT(DISTINCT order_number) FROM gold.fact_sales
UNION ALL
SELECT 'Total Num Products',  COUNT(DISTINCT product_key) FROM gold.dim_products
UNION ALL
SELECT 'Total Num Customers', COUNT(customer_key) FROM gold.dim_customers



-- Magnitude Analysis
-- Compare the measure values by categories or dimensions
-- Formula = [Measure] BY [Dimension]

-- Find total customers by countries

SELECT 
country,
COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers DESC


-- Find total customers by gender

SELECT 
gender,
COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers DESC


-- Find total products by category

SELECT 
category,
COUNT(product_key) AS total_products
FROM gold.dim_products
GROUP BY category
ORDER BY total_products DESC



-- Average cost in each product category

SELECT 
category,
AVG(cost) AS average_cost
FROM gold.dim_products
GROUP BY category
ORDER BY average_cost DESC


-- Total revenue generated for each category

SELECT  p.category, SUM(f.sales_amount) AS total_revenue 
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON  f.product_key = p.product_key
GROUP BY p.category
ORDER BY total_revenue DESC


-- Total revenue generated by each customer

SELECT  c.customer_key, c.first_name, c.last_name, SUM(f.sales_amount) AS total_revenue 
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON  c.customer_key = f.customer_key
GROUP BY c.customer_key, c.first_name, c.last_name
ORDER BY total_revenue DESC



-- Distribution of sold items across countries


SELECT  c.country, SUM(f.quantity) AS total_sold_items
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON  c.customer_key = f.customer_key
GROUP BY c.country
ORDER BY total_sold_items DESC



-- Ranking
-- Ordering Dimensions based on Measures 
-- Formula = Rank[Dimension] By [Measure]



-- Which five products generate the highest revenue

SELECT TOP 5 p.product_name, SUM(f.sales_amount) AS total_revenue 
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON  p.product_key = f.product_key
GROUP BY  p.product_name
ORDER BY total_revenue DESC


-- Same query with window functions

SELECT *
FROM (
    SELECT
        p.product_name,
        SUM(f.sales_amount) AS total_revenue,
        RANK() OVER (ORDER BY SUM(f.sales_amount) DESC) AS rank_products
    FROM gold.fact_sales f
    LEFT JOIN gold.dim_products p
        ON p.product_key = f.product_key
    GROUP BY p.product_name
) AS ranked_products
WHERE rank_products <= 5;


-- Which five products generate the least revenue

SELECT TOP 5 p.product_name, SUM(f.sales_amount) AS total_revenue 
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON  p.product_key = f.product_key
GROUP BY  p.product_name
ORDER BY total_revenue 
